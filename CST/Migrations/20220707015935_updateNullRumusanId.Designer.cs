// <auto-generated />
using System;
using CST.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CST.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220707015935_updateNullRumusanId")]
    partial class updateNullRumusanId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CST.Models.Master.M_Bab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NasabahId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NasabahId");

                    b.ToTable("M_Bab");
                });

            modelBuilder.Entity("CST.Models.Master.M_Jabatan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("M_Jabatan");
                });

            modelBuilder.Entity("CST.Models.Master.M_Nasabah", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("KodeNasabah")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("M_Nasabah");
                });

            modelBuilder.Entity("CST.Models.Master.M_SubMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NasabahId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NasabahId");

                    b.ToTable("M_SubBab");
                });

            modelBuilder.Entity("CST.Models.Master.M_SubSubMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NasabahId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NasabahId");

                    b.ToTable("M_SubSubBab");
                });

            modelBuilder.Entity("CST.Models.Master.M_Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("M_Unit");
                });

            modelBuilder.Entity("CST.Models.Master.M_User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("JabatanId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NPP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusPegawai")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("JabatanId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UnitId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CST.Models.Master.T_RumusanBab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BabId")
                        .HasColumnType("int");

                    b.Property<int>("RumusanNasabahId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BabId");

                    b.HasIndex("RumusanNasabahId");

                    b.ToTable("T_RumusanBab");
                });

            modelBuilder.Entity("CST.Models.Master.T_RumusanNasabah", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NasabahId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NasabahId");

                    b.ToTable("T_RumusanNasabah");
                });

            modelBuilder.Entity("CST.Models.Master.T_RumusanSubBab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RumusanBabId")
                        .HasColumnType("int");

                    b.Property<int>("SubBabId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RumusanBabId");

                    b.HasIndex("SubBabId");

                    b.ToTable("T_RumusanSubBab");
                });

            modelBuilder.Entity("CST.Models.Master.T_RumusanSubSubBab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RumusanSubBabId")
                        .HasColumnType("int");

                    b.Property<int>("SubSubBabId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RumusanSubBabId");

                    b.HasIndex("SubSubBabId");

                    b.ToTable("T_RumusanSubSubBab");
                });

            modelBuilder.Entity("CST.Models.Master.T_Transaksi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreaterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Kelompok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RumusanNasabahId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TanggalSampul")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RumusanNasabahId");

                    b.ToTable("T_Transaksi");
                });

            modelBuilder.Entity("CST.Models.Master.T_TransBab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BabId")
                        .HasColumnType("int");

                    b.Property<int>("TransaksisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BabId");

                    b.HasIndex("TransaksisId");

                    b.ToTable("T_TransBab");
                });

            modelBuilder.Entity("CST.Models.Master.T_TransDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransaksiId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransaksiId");

                    b.ToTable("T_TransDetail");
                });

            modelBuilder.Entity("CST.Models.Master.T_TransSubBab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SubBabId")
                        .HasColumnType("int");

                    b.Property<int>("TransBabId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubBabId");

                    b.HasIndex("TransBabId");

                    b.ToTable("T_TransSubBab");
                });

            modelBuilder.Entity("CST.Models.Master.T_TransSubSubBab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubSubBabId")
                        .HasColumnType("int");

                    b.Property<int>("TransSubBabId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubSubBabId");

                    b.HasIndex("TransSubBabId");

                    b.ToTable("T_TransSubSubBab");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CST.Models.Master.M_Bab", b =>
                {
                    b.HasOne("CST.Models.Master.M_Nasabah", "Nasabah")
                        .WithMany()
                        .HasForeignKey("NasabahId");

                    b.Navigation("Nasabah");
                });

            modelBuilder.Entity("CST.Models.Master.M_SubMenu", b =>
                {
                    b.HasOne("CST.Models.Master.M_Nasabah", "Nasabah")
                        .WithMany()
                        .HasForeignKey("NasabahId");

                    b.Navigation("Nasabah");
                });

            modelBuilder.Entity("CST.Models.Master.M_SubSubMenu", b =>
                {
                    b.HasOne("CST.Models.Master.M_Nasabah", "Nasabah")
                        .WithMany()
                        .HasForeignKey("NasabahId");

                    b.Navigation("Nasabah");
                });

            modelBuilder.Entity("CST.Models.Master.M_User", b =>
                {
                    b.HasOne("CST.Models.Master.M_Jabatan", "Jabatan")
                        .WithMany()
                        .HasForeignKey("JabatanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Models.Master.M_Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Jabatan");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CST.Models.Master.T_RumusanBab", b =>
                {
                    b.HasOne("CST.Models.Master.M_Bab", "Bab")
                        .WithMany()
                        .HasForeignKey("BabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Models.Master.T_RumusanNasabah", "RumusanNasabah")
                        .WithMany()
                        .HasForeignKey("RumusanNasabahId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bab");

                    b.Navigation("RumusanNasabah");
                });

            modelBuilder.Entity("CST.Models.Master.T_RumusanNasabah", b =>
                {
                    b.HasOne("CST.Models.Master.M_Nasabah", "Nasabah")
                        .WithMany()
                        .HasForeignKey("NasabahId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nasabah");
                });

            modelBuilder.Entity("CST.Models.Master.T_RumusanSubBab", b =>
                {
                    b.HasOne("CST.Models.Master.T_RumusanBab", "RumusanBab")
                        .WithMany()
                        .HasForeignKey("RumusanBabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Models.Master.M_SubMenu", "SubBab")
                        .WithMany()
                        .HasForeignKey("SubBabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RumusanBab");

                    b.Navigation("SubBab");
                });

            modelBuilder.Entity("CST.Models.Master.T_RumusanSubSubBab", b =>
                {
                    b.HasOne("CST.Models.Master.T_RumusanSubBab", "RumusanSubBab")
                        .WithMany()
                        .HasForeignKey("RumusanSubBabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Models.Master.M_SubSubMenu", "SubSubBab")
                        .WithMany()
                        .HasForeignKey("SubSubBabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RumusanSubBab");

                    b.Navigation("SubSubBab");
                });

            modelBuilder.Entity("CST.Models.Master.T_Transaksi", b =>
                {
                    b.HasOne("CST.Models.Master.T_RumusanNasabah", "RumusanNasabah")
                        .WithMany()
                        .HasForeignKey("RumusanNasabahId");

                    b.Navigation("RumusanNasabah");
                });

            modelBuilder.Entity("CST.Models.Master.T_TransBab", b =>
                {
                    b.HasOne("CST.Models.Master.M_Bab", "Bab")
                        .WithMany()
                        .HasForeignKey("BabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Models.Master.T_Transaksi", "Transaksis")
                        .WithMany()
                        .HasForeignKey("TransaksisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bab");

                    b.Navigation("Transaksis");
                });

            modelBuilder.Entity("CST.Models.Master.T_TransDetail", b =>
                {
                    b.HasOne("CST.Models.Master.T_Transaksi", "Transaksi")
                        .WithMany()
                        .HasForeignKey("TransaksiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaksi");
                });

            modelBuilder.Entity("CST.Models.Master.T_TransSubBab", b =>
                {
                    b.HasOne("CST.Models.Master.M_SubMenu", "SubBab")
                        .WithMany()
                        .HasForeignKey("SubBabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Models.Master.T_TransBab", "TransBab")
                        .WithMany()
                        .HasForeignKey("TransBabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubBab");

                    b.Navigation("TransBab");
                });

            modelBuilder.Entity("CST.Models.Master.T_TransSubSubBab", b =>
                {
                    b.HasOne("CST.Models.Master.M_SubSubMenu", "SubSubBab")
                        .WithMany()
                        .HasForeignKey("SubSubBabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Models.Master.T_TransSubBab", "TransSubBab")
                        .WithMany()
                        .HasForeignKey("TransSubBabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubSubBab");

                    b.Navigation("TransSubBab");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CST.Models.Master.M_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CST.Models.Master.M_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CST.Models.Master.M_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CST.Models.Master.M_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
